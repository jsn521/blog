{
  "name": "html-pe",
  "description": "Accurate yet performant HTML parser and encoder",
  "version": "1.0.3",
  "author": {
    "name": "Igor Sadikov",
    "email": "igor@vokidas.com"
  },
  "keywords": [
    "html",
    "parser",
    "entity",
    "encoder",
    "standards-compliant"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/vokidas/html-pe.git"
  },
  "bugs": {
    "url": "http://github.com/vokidas/html-pe/issues",
    "email": "igor@vokidas.com"
  },
  "scripts": {
    "test": "node tests/runtests.js"
  },
  "directories": {
    "lib": "lib/"
  },
  "main": "lib/html.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/vokidas/html-pe/raw/master/LICENSE"
    }
  ],
  "readme": "# html-pe\n\n`html-pe` is for those who expect accuracy from their HTML parser, but are\nunwilling to compromise on performance. This parser handles a variety of edge\ncases as prescribed by the HTML5 standard and remains performant thanks to\noptimizations such as avoiding regular expressions.\n\nChunked parsing is supported, and an efficient HTML entity encoder/decoder is\nincluded.\n\n## Installation\n\n`npm install html-pe`\n\n## Usage\n\n```javascript\nvar html = require('html-pe');\n\nvar parser = new html.Parser();\n\n// parse chunks\nparser.write('<p style=\"color:red\">foo');\nparser.write('</p>');\nparser.end();\n\n// parse entire string\nparser.parse('<div id=\"main\">bar</div>');\n```\n\nOptionally, an `options` object may be passed to the constructor (default values\nshown):\n\n```javascript\nvar parser = new html.Parser({\n    trim: false,    // trim whitespace in text nodes\n    decode: true    // decode HTML character entities in attribute values and text nodes\n});\n```\n\n### Event Handling\n\nThe parser is an `EventEmitter` and emits the following events:\n\n```javascript\n// opening tag\nparser.on('open', function (name, attributes, empty) {\n    // <string> name\n    // <object> attributes\n    // <bool> empty: is this an empty (self-closing) tag\n});\n\n// text node\nparser.on('text', function (text) {\n    // <string> text\n});\n\n// closing tag\nparser.on('close', function (name) {\n    // <string> name\n});\n\n// end\nparser.on('end', function () {});\n```\n\nTwo handlers are provided:\n\n```javascript\nvar dom = new html.DOM(function (document) {\n   // <object> document\n});\ndom.listen(parser);\n// ...\ndom.reset();\n\nvar printer = new html.Printer();\nprinter.listen(parser);\n```\n\nThe `Printer` handler pretty-prints the parsed HTML to the console. The `DOM`\nhandler passes a `document` object to its callback, which is detailed below.\nFollow the structure in `handlers.js` to create new handlers.\n\n### DOM Manipulation\n\nThe `DOM` handler will parse `<div id=\"main\">hello <b>world</b></div>` into the\nfollowing `document`:\n\n```javascript\n{\n    type: 'element',\n    parent: {},\n    name: '',\n    attributes: {},\n    children: [{\n        type: 'element',\n        parent : [Circular],\n        name: 'div',\n        attributes: {\n            id: 'main'\n        },\n        children: [{\n            type: 'text',\n            parent: [Circular],\n            text: 'hello '\n        },\n        {\n            type: 'element',\n            parent: [Circular],\n            name: 'b',\n            attributes: {},\n            children: [{\n                type: 'text',\n                parent: [Circular],\n                text: 'world'\n            }]\n        }]\n    }]\n}\n```\n\nNodes are either `Element` nodes or `Text` nodes. All nodes have a `textContent`\nproperty. `Element` nodes provide the DOM navigation methods `getElementById`,\n`getElementsByName`, `getElementsByClassName`, and `getElementsByTagName`. Two\nprimitive methods are also available: `getElementsBy(test)` and\n`getElementBy(test)` where `test` is a function of type `Element -> bool`. For\nexample, this is how `getElementsBy` is used to implement\n`getElementsByTagName`:\n\n```javascript\nvar Element = html.Element;\n\nElement.prototype.getElementsByTagName = function (name) {\n    return this.getElementsBy(function (elem) {\n        return elem.name == name;\n    });\n}\n```\n\nSee `dom.js` for details.\n\n### HTML Character Entity Encoder/Decoder\n\n```javascript\nvar html = require('html-pe');\n\nhtml.encode('<p id=\"main\">Hello &amp; world!</p>',\n            false   // encode &<>\"' only (default)\n           );\n// '&lt;p id=&quot;main&quot;&gt;Hello &amp;amp; world!&lt;/p&gt;'\nhtml.encode('<p>здравствуйте!</p>',\n            true    // also encode all non-ASCII and non-printable characters\n           );\n// '&lt;p&gt;&#1079;&#1076;&#1088;&#1072;&#1074;&#1089;&#1090;&#1074;&#1091;&#1081;&#1090;&#1077;!&lt;/p&gt;'\n\nhtml.decode('It&apos;s &not me');\n// 'It\\'s ¬ me'\n```\n\nSee `encoder.js` for details.\n\n## Performance\n\n`html-pe` has slightly worse performance than\n[htmlparser2](https://github.com/fb55/node-htmlparser). A benchmark is available\nin `tests/bench.js`.\n\n## License\n\nMIT. See `LICENSE`.\n",
  "readmeFilename": "README.md",
  "_id": "html-pe@1.0.3",
  "dist": {
    "shasum": "86a83d1e6ff6e4684eaa65d647fc00283c6cbbfe"
  },
  "_from": "html-pe@*",
  "_resolved": "https://registry.npmjs.org/html-pe/-/html-pe-1.0.3.tgz"
}
